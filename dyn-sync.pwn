// generated by "sampctl package init"
#include <a_samp>
#include <redis>
#include <json>


new Redis:client;
new PubSub:pubsub_2;

public OnFilterScriptInit(){
    print("\n--REDIS.\n");
	new ret = Redis_Connect("localhost", 6379, "", client);
	printf("REDIS ret: %d", ret);

	Redis_Subscribe("localhost", 6379, "", "dynamo:local:api:run-function", "OnServerExecuteRemoteFunction", pubsub_2);
	SetTimer("IteratePlayers", 1000, true);
	return 1;
}


public OnPlayerConnect(playerid) {
    new name[MAX_PLAYER_NAME];
    new message[256];

    GetPlayerName(playerid, name, sizeof(name));
    format(message, sizeof(message), "%d|%s", playerid, name);
    printf("OnPlayerConnect: %s",message);
    //TODO: convert to json?
    new ret = Redis_Publish(client, "dynamo:local:samp:player-connect", message);
    printf("OnPlayerConnect ret: %d", ret);

    return 1;
}
public OnPlayerDisconnect(playerid) {
    new name[MAX_PLAYER_NAME];
    new message[256];
    GetPlayerName(playerid, name, sizeof(name));
    format(message, sizeof(message), "%d|%s", playerid, name);
    printf("OnPlayerDisconnect: %s",message);
    new ret = Redis_Publish(client, "dynamo:local:samp:player-disconnect", message);
    printf("OnPlayerDisconnect ret: %d", ret);

}

public OnPlayerUpdate(playerid) {

    if(!IsPlayerConnected(playerid)) return 0;

    new name[MAX_PLAYER_NAME];
    new message[256];
    new Float:x, Float:y, Float:z, Float:health, Float:armor;

    GetPlayerName(playerid, name, sizeof(name));
    GetPlayerPos(playerid, x, y, z);
    GetPlayerHealth(playerid, health);
    GetPlayerArmour(playerid, armor);

    format(message, sizeof(message), "%d|%s|%f|%f|%f|%f|%f", playerid, name, x, y, z, health, armor);
    Redis_Publish(client, "dynamo:local:samp:player-update", message);
    return 1;

}

forward IteratePlayers();
public IteratePlayers()
{
    for (new i = 0; i < MAX_PLAYERS; i++)
    {
        if (IsPlayerConnected(i))
        {
            SyncPlayer(i);
        }
    }
}

forward SyncPlayer(playerid);
public SyncPlayer(playerid) {
    // Add name to JSON
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, sizeof(name));

    // Add position to JSON
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);

    // Add health and armour to JSON
    new Float:health, Float:armour;
    GetPlayerHealth(playerid, health);
    GetPlayerArmour(playerid, armour);

    // Add skin, interior, and virtual world to JSON
    new skin = GetPlayerSkin(playerid);
    new interior = GetPlayerInterior(playerid);
    new virtualWorld = GetPlayerVirtualWorld(playerid);

    new Node:playerJson = JSON_Object(
        "id", JSON_Int(playerid),
        "name", JSON_String(name),
        "pos", JSON_Object(
            "x", JSON_Float(x),
            "y", JSON_Float(y),
            "z", JSON_Float(z)
        ),
        "health", JSON_Float(health),
        "armour", JSON_Float(armour),
        "skin", JSON_Int(skin),
        "interior", JSON_Int(interior),
        "virtualWorld", JSON_Int(virtualWorld)
    );

    new jsonStr[512];
    JSON_Stringify(playerJson, jsonStr, sizeof(jsonStr));

    Redis_Publish(client, "dynamo:local:samp:player-sync", jsonStr);

}

forward OnServerExecuteRemoteFunction(PubSub:id, data[]);
public OnServerExecuteRemoteFunction(PubSub:id, data[]){

    new Node:node;
    new ret;

    ret = JSON_Parse(data, node);
    if(ret) {
        printf("[OnServerExecuteRemoteFunction] could not parse json. Err: %d", ret);
        return 0;
    }

    // Extract "function" from JSON
    new func_to_call[32];
    new full_func_to_call[40] = "Remote";
    if (JSON_GetString(node, "function", func_to_call))
    {
        printf("[OnServerExecuteRemoteFunction] Failed to get 'function' from JSON.");
        return 0;
    }

    strcat(full_func_to_call, func_to_call);

    new params_to_send[128];
    if (JSON_GetString(node, "params", params_to_send))
    {
        printf("[OnServerExecuteRemoteFunction] Failed to get 'params' from JSON.");
        return 0;
    }

    CallRemoteFunction(full_func_to_call, "s", params_to_send);

    return 1;
}